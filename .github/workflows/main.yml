name: JSolution-Attendance-Management Backend GitHub Actions & Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # application.yml
    - name: Create application.yml
      run: |
          mkdir -p src/main/resources 
          cat <<EOF > src/main/resources/application.yml
          spring:
            application:
              name: jsolution
            datasource:
              url: ${DB_URL}
              username: ${DB_USERNAME}
              password: ${DB_PASSWORD}
              driver-class-name: org.mariadb.jdbc.Driver
              hikari:
                maximum-pool-size: 10
                minimum-idle: 5
                idle-timeout: 300000
                connection-timeout: 30000
                max-lifetime: 1800000

            jpa:
              hibernate:
                ddl-auto: update
                naming:
                  physical-strategy: site.wellmind.common.strategy.UpperCasePhysicalNamingStrategy
              properties:
                hibernate:
                  dialect: org.hibernate.dialect.MariaDBDialect
                  jdbc:
                    lob:
                      non_contextual_creation: true
                  format_sql: true
              show-sql: true
              defer-datasource-initialization: true
              open-in-view: false

          springdoc:
            swagger-ui:
              path: /swagger-api-test
              groups-order: DESC
              tags-sorter: alpha
              operations-sorter: method
            paths-to-match:
              - /api/**

          mail:
            host: smtp.gmail.com
            port: 587
            username: ${MAIL_USERNAME}
            password: ${MAIL_PASSWORD}
            sender-email: ${MAIL_USERNAME}
            properties:
              mail:
                smtp:
                  auth: true
                  starttls:
                    enable: true
                    required: true
                  connectiontimeout: 5000
                  timeout: 5000
                  writetimeout: 5000
            auth-code-expiration-millis: 1800000

          app:
            domain: ${APP_DOMAIN}

          jwt:
            secret: ${JWT_SECRET}
            issuer: "wellmind.com"
            expired:
              access: 3600000
              refresh: 1209600000
            passwordSetup:
              expiration: 900
        
          encryption:
            secret-key: ${ENCRYPTION_SECRET_KEY}
            init-vector: ${INIT_VECTOR}
          EOF
      env:
        DB_URL: ${{ secrets.DB_URL }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    # Set executable permission for gradlew
    - name: Set executable permission for gradlew
      run: chmod +x gradlew

    # Gradle build
    - name: Build with Gradle
      run: ./gradlew build

    - name: Run Tests
      run: ./gradlew test

    # Docker build & Push 
    - name: Docker build & push to Docker Hub
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test .
        docker push ${{ secrets.DOCKER_USERNAME }}/docker-test

    # EC2 배포
    - name: Docker image pull & Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 퍼블릭 DNS
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }} # pem 키
        # 도커 작업
        script: |
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
          sudo docker stop $(sudo docker ps -a -q)
          sudo docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
          sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q)
          sudo docker image prune -a -f
